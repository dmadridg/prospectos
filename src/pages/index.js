import Head from 'next/head'
import Image from 'next/image'
import Link from "next/link";

import { useDebounce } from 'use-debounce';

import {
  Table,
  TableHeader,
  TableCell,
  TableBody,
  TableRow,
  TableFooter,
  TableContainer,
  Button,
  Pagination,
  Label,
  Input,
} from "@windmill/react-ui";
import { useSession } from 'next-auth/react';
import { useEffect, useState } from 'react';
import { server } from '@/backend/utils/server';
import Swal from 'sweetalert2';

export default function Home({ data }) {
  const { data: session } = useSession();
  const [isMenuAccountOpen, setIsMenuAccountOpen] = useState(false);
  const [prospectos, setProspectos] = useState(data.prospectos);
  const [pageTable2, setPageTable2] = useState(1);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false)
  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false)
  const [filterValue, setFilterValue] = useState("");
  const resultsPerPage = 10;
  const [totalResults, setTotalResults] = useState(data.totalResults);
  const [filterValueDebounce] = useDebounce(filterValue, 1000);
  const [selectedProspecto, setSelectedProspecto] = useState({
    id: "",
    nombre: "",
    apellido_paterno: "",
    apellido_materno: "",
    calle: "",
    numero_exterior: "",
    colonia: "",
    codigo_postal: "",
    telefono: "",
    rfc: "",
    status: 0,
  });
  const [selectedProspectoDocs, setSelectedProspectoDocs] = useState([]);

  const openModal = async (prospecto) => {
    Swal.fire({
      title: 'Cargando...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading()
      },
    })

    const res = await fetch(`${server}/api/prospecto/${prospecto.id}`, {
      method: 'GET',
    })
    const data = await res.json()

    Swal.close()

    setSelectedProspecto(prospecto)
    setSelectedProspectoDocs(data.docs)

    setIsViewModalOpen(true)
  }

  const closeModal = () => {
    setSelectedProspecto({
      id: "",
      nombre: "",
      apellido_paterno: "",
      apellido_materno: "",
      calle: "",
      numero_exterior: "",
      colonia: "",
      codigo_postal: "",
      telefono: "",
      rfc: "",
      status: 0,
    });
    setSelectedProspectoDocs([]);
    setIsViewModalOpen(false)
  }

  useEffect(() => {
    async function getProspectos() {
      const res = await fetch(`${server}/api/prospecto?page=${pageTable2}&limit=${resultsPerPage}&q=${filterValueDebounce}`, {
        method: 'GET',
      })
      const data = await res.json()
      setProspectos(data.prospectos)
      setTotalResults(data.totalResults)
    }
    getProspectos()
  }, [pageTable2, filterValueDebounce])

  function onPageChangeTable2(p) {
    setPageTable2(p);
  }

  return (
    <div>
      <Head>
        <title>Prospectos App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container grid px-6 mx-auto">
        <div className="lg:flex lg:items-center lg:justify-between">
          <div className="flex-1 min-w-0">
            <h2 className="my-6 text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate dark:text-gray-200">
              Prospectos
            </h2>
          </div>
          {prospectos.length == 0 && (
            <div className="flex mt-5 lg:mt-0 lg:ml-4">
              <span className="sm:ml-3">
                <Link href="/prospecto/nuevo">
                  <a className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Nuevo prospecto
                  </a>
                </Link>
              </span>
            </div>
          )}
        </div>

        {isViewModalOpen && (
          <>
            <div
              className="fixed inset-0 z-50 flex items-center justify-center overflow-x-hidden overflow-y-auto outline-none focus:outline-none"
            >
              <div className="relative w-auto max-w-6xl px-10 mx-auto my-6">
                {/*content*/}
                <div className="relative flex flex-col w-full bg-white border-0 rounded-lg shadow-lg outline-none dark:bg-gray-800 focus:outline-none">
                  {/*header*/}
                  <div className="flex items-start justify-between p-5 border-b border-solid rounded-t border-blueGray-200">
                    <h3 className="text-3xl font-semibold text-black dark:text-gray-200">
                      Prospecto: {selectedProspecto.id}
                    </h3>
                    <button
                      className="float-right p-1 ml-auto text-3xl font-semibold leading-none text-black bg-transparent border-0 outline-none opacity-5 focus:outline-none"
                      onClick={() => setIsViewModalOpen(false)}
                    >
                      <span className="block w-6 h-6 text-2xl text-black bg-transparent outline-none opacity-5 focus:outline-none">
                        Ã—
                      </span>
                    </button>
                  </div>
                  {/*body*/}
                  <div className="relative flex-auto p-6">
                    <div className="w-full">
                      <div className="flex flex-wrap">
                        <div className="w-full px-4 lg:w-6/12">
                          <div className="relative w-full mb-3">
                            <label
                              className="block mb-2 text-xs font-bold text-blueGray-600 dark:text-gray-200"
                              htmlFor="grid-password"
                            >
                              Nombre:
                            </label>
                            <input
                              type="text"
                              className={`w-full px-3 py-3 text-sm transition-all duration-150 ease-linear bg-white rounded shadow dark:text-gray-300 form-input focus:border-purple-400 dark:border-gray-600 focus:shadow-outline-purple dark:focus:border-gray-600 dark:focus:shadow-outline-gray dark:bg-gray-700 placeholder-blueGray-300 text-blueGray-600 focus:outline-none focus:ring`}
                              value={selectedProspecto.nombre}
                              disabled
                            />
                          </div>
                        </div>
                        <div className="w-full px-4 lg:w-6/12">
                          <div className="relative w-full mb-3">
                            <label
                              className="block mb-2 text-xs font-bold text-blueGray-600 dark:text-gray-200"
                              htmlFor="grid-password"
                            >
                              Apellido Paterno:
                            </label>
                            <input
                              type="text"
                              className={` w-full px-3 py-3 text-sm transition-all duration-150 ease-linear bg-white rounded shadow dark:text-gray-300 form-input focus:border-purple-400 dark:border-gray-600 focus:shadow-outline-purple dark:focus:border-gray-600 dark:focus:shadow-outline-gray dark:bg-gray-700 placeholder-blueGray-300 text-blueGray-600 focus:outline-none focus:ring`}
                              value={selectedProspecto.apellido_paterno}
                              disabled
                            />
                          </div>
                        </div>
                        <div className="w-full px-4 lg:w-6/12">
                          <div className="relative w-full mb-3">
                            <label
                              className="block mb-2 text-xs font-bold text-blueGray-600 dark:text-gray-200"
                              htmlFor="grid-password"
                            >
                              Apellido Materno:
                            </label>
                            <input
                              type="text"
                              className={`w-full px-3 py-3 text-sm transition-all duration-150 ease-linear bg-white rounded shadow dark:text-gray-300 form-input focus:border-purple-400 dark:border-gray-600 focus:shadow-outline-purple dark:focus:border-gray-600 dark:focus:shadow-outline-gray dark:bg-gray-700 placeholder-blueGray-300 text-blueGray-600 focus:outline-none focus:ring`}
                              value={selectedProspecto.apellido_materno}
                              disabled
                            />
                          </div>
                        </div>
                        <div className="w-full px-4 lg:w-6/12">
                          <div className="relative w-full mb-3">
                            <label
                              className="block mb-2 text-xs font-bold text-blueGray-600 dark:text-gray-200"
                              htmlFor="grid-password"
                            >
                              Calle:
                            </label>
                            <input
                              type="text"
                              className={`w-full px-3 py-3 text-sm transition-all duration-150 ease-linear bg-white rounded shadow dark:text-gray-300 form-input focus:border-purple-400 dark:border-gray-600 focus:shadow-outline-purple dark:focus:border-gray-600 dark:focus:shadow-outline-gray dark:bg-gray-700 placeholder-blueGray-300 text-blueGray-600 focus:outline-none focus:ring`}
                              value={selectedProspecto.calle}
                              disabled
                            />
                          </div>
                        </div>

                        <div className="w-full px-4 lg:w-6/12">
                          <div className="relative w-full mb-3">
                            <label
                              className="block mb-2 text-xs font-bold text-blueGray-600 dark:text-gray-200"
                              htmlFor="grid-password"
                            >
                              No. Ext:
                            </label>
                            <input
                              type="number"
                              className={`w-full px-3 py-3 text-sm transition-all duration-150 ease-linear bg-white rounded shadow dark:text-gray-300 form-input focus:border-purple-400 dark:border-gray-600 focus:shadow-outline-purple dark:focus:border-gray-600 dark:focus:shadow-outline-gray dark:bg-gray-700 placeholder-blueGray-300 text-blueGray-600 focus:outline-none focus:ring`}
                              value={selectedProspecto.numero_exterior}
                              disabled
                            />
                          </div>
                        </div>

                        <div className="w-full px-4 lg:w-6/12">
                          <div className="relative w-full mb-3">
                            <label
                              className="block mb-2 text-xs font-bold text-blueGray-600 dark:text-gray-200"
                              htmlFor="grid-password"
                            >
                              Colonia:
                            </label>
                            <input
                              className={`w-full px-3 py-3 text-sm transition-all duration-150 ease-linear bg-white rounded shadow dark:text-gray-300 form-input focus:border-purple-400 dark:border-gray-600 focus:shadow-outline-purple dark:focus:border-gray-600 dark:focus:shadow-outline-gray dark:bg-gray-700 placeholder-blueGray-300 text-blueGray-600 focus:outline-none focus:ring`}
                              value={selectedProspecto.colonia}
                              disabled
                            />
                          </div>
                        </div>

                        <div className="w-full px-4 lg:w-6/12">
                          <div className="relative w-full mb-3">
                            <label
                              className="block mb-2 text-xs font-bold text-blueGray-600 dark:text-gray-200"
                              htmlFor="grid-password"
                            >
                              CÃ³digo postal:
                            </label>
                            <input
                              type="text"
                              className={`w-full px-3 py-3 text-sm transition-all duration-150 ease-linear bg-white rounded shadow dark:text-gray-300 form-input focus:border-purple-400 dark:border-gray-600 focus:shadow-outline-purple dark:focus:border-gray-600 dark:focus:shadow-outline-gray dark:bg-gray-700 placeholder-blueGray-300 text-blueGray-600 focus:outline-none focus:ring`}
                              value={selectedProspecto.codigo_postal}
                              disabled
                            />
                          </div>
                        </div>

                        <div className="w-full px-4 lg:w-6/12">
                          <div className="relative w-full mb-3">
                            <label
                              className="block mb-2 text-xs font-bold text-blueGray-600 dark:text-gray-200"
                              htmlFor="grid-password"
                            >
                              TelÃ©fono:
                            </label>
                            <input
                              type="text"
                              className={`w-full px-3 py-3 text-sm transition-all duration-150 ease-linear bg-white rounded shadow dark:text-gray-300 form-input focus:border-purple-400 dark:border-gray-600 focus:shadow-outline-purple dark:focus:border-gray-600 dark:focus:shadow-outline-gray dark:bg-gray-700 placeholder-blueGray-300 text-blueGray-600 focus:outline-none focus:ring`}
                              value={selectedProspecto.telefono}
                              disabled
                            />
                          </div>
                        </div>

                        <div className="w-full px-4 lg:w-6/12">
                          <div className="relative w-full mb-3">
                            <label
                              className="block mb-2 text-xs font-bold text-blueGray-600 dark:text-gray-200"
                              htmlFor="grid-password"
                            >
                              RFC:
                            </label>
                            <input
                              type="text"
                              className={`w-full px-3 py-3 text-sm transition-all duration-150 ease-linear bg-white rounded shadow dark:text-gray-300 form-input focus:border-purple-400 dark:border-gray-600 focus:shadow-outline-purple dark:focus:border-gray-600 dark:focus:shadow-outline-gray dark:bg-gray-700 placeholder-blueGray-300 text-blueGray-600 focus:outline-none focus:ring`}
                              value={selectedProspecto.rfc}
                              disabled
                            />
                          </div>
                        </div>

                        <div className="w-full px-4 lg:w-12/12">
                          <div className="relative w-full mb-3">
                            <h3 className="text-3xl text-black dark:text-gray-200">
                              Documentos
                            </h3>

                            <div>
                              {selectedProspectoDocs.length > 0 && (
                                <div className="p-3 mt-3 border">
                                  {selectedProspectoDocs.map((file, index) => (
                                    <p
                                      className="text-black dark:text-gray-200"
                                      key={index}
                                    >
                                      {index + 1 + '.- ' + file.documento}
                                    </p>
                                  ))}
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  {/*footer*/}
                  <div className="flex items-center justify-end p-6 border-t border-solid rounded-b border-blueGray-200">
                    <button
                      className="px-6 py-2 mb-1 mr-1 text-sm font-bold text-red-500 uppercase transition-all duration-150 ease-linear outline-none background-transparent focus:outline-none"
                      type="button"
                      onClick={() => closeModal()}
                    >
                      Close
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div className="fixed inset-0 z-40 bg-black opacity-25"></div>
          </>
        )}


        <div className="w-full overflow-hidden rounded-lg shadow-xs">
          <div className="w-full mt-10">

            <div className="flex justify-between">
              <div className='mb-5'>
                <Label className="text-sm text-gray-700 text-md dark:text-gray-400">
                  <span>Buscar</span>
                  <Input
                    css={""}
                    onChange={(e) => setFilterValue(e.target.value)}
                    value={filterValue}
                    className="block w-full mt-1 text-sm leading-5 focus:outline-none dark:text-gray-300 form-input focus:border-purple-400 dark:border-gray-600 focus:shadow-outline-purple dark:focus:border-gray-600 dark:focus:shadow-outline-gray dark:bg-gray-700"
                  />
                </Label>
              </div>
              <div>
                <Link href="/prospecto/nuevo">
                  <a className="px-4 py-2 font-bold text-white bg-blue-500 border border-blue-700 rounded hover:bg-blue-700">
                    Agregar Prospecto
                  </a>
                </Link>
              </div>
            </div>
            {prospectos.length > 0 ? (<>
              <TableContainer className="mb-8">
                <Table>
                  <TableHeader>
                    <tr>
                      <TableCell># Id</TableCell>
                      <TableCell>Nombre</TableCell>
                      <TableCell>Primer Apellido</TableCell>
                      <TableCell>Segundo Apellido</TableCell>
                      <TableCell>Status</TableCell>
                      <TableCell>Opciones</TableCell>
                    </tr>
                  </TableHeader>
                  <TableBody>
                    {prospectos.map((prospecto, i) => (
                      <TableRow key={i}>
                        <TableCell>{prospecto.id}</TableCell>
                        <TableCell>{prospecto.nombre}</TableCell>
                        <TableCell>{prospecto.apellido_paterno}</TableCell>
                        <TableCell>{prospecto.apellido_materno}</TableCell>
                        <TableCell>
                          <span className={`${prospecto.status == 0 ? 'border text-black dark:text-gray-200 dark:bg-orange-700' : ''
                            } ${prospecto.status == 1 ? 'border text-black dark:text-gray-200 dark:bg-green-700' : ''
                            } ${prospecto.status == 2 ? 'border text-black dark:text-gray-200 dark:bg-red-700' : ''
                            } inline-flex px-2 text-xs font-medium leading-5  rounded-full `}>
                            {(prospecto.status == 0) ? "Enviado" : (prospecto.status == 1) ? "Autorizado" : "Rechazado"}
                          </span>
                          {/* <Badge type="warning">
                            {(prospecto.status == 0) ? "Enviado" : (prospecto.status == 1) ? "Autorizado" : "Rechazado"}
                          </Badge> */}
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-4">
                            <Link href={`/prospecto/${prospecto.id}`} passHref>
                              <Button
                                layout="link"
                                size="icon"
                                aria-label="Edit"
                              >
                                <svg
                                  className="w-5 h-5"
                                  aria-hidden="true"
                                  fill="currentColor"
                                  viewBox="0 0 20 20"
                                >
                                  <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                                </svg>
                              </Button>
                            </Link>
                            <Button
                              layout="link"
                              size="icon"
                              aria-label="View"
                              onClick={() => openModal(prospecto)}
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="16"
                                height="16"
                                fill="currentColor"
                                className="w-5 h-5"
                                viewBox="0 0 16 16"
                              >
                                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z" />
                                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z" />
                              </svg>
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
                <TableFooter>
                  <Pagination
                    totalResults={totalResults}
                    resultsPerPage={resultsPerPage}
                    onChange={onPageChangeTable2}
                    label="Table navigation"
                  />
                </TableFooter>
              </TableContainer></>) : (<>
                <div className='w-full text-center'>
                  <h2 className='my-6 text-3xl dark:text-gray-200'>No hay prospectos</h2>
                </div>
              </>)}
          </div>
        </div>
      </div>
    </div>
  )
}

export async function getServerSideProps({ req }) {
  const response = await fetch(`${server}/api/prospecto?page=1&limit=10`, {
    method: 'GET',
  })
  const { prospectos, totalResults } = await response.json()
  // const session = await Nextauth.session(req)
  const data = {
    prospectos,
    totalResults,
    // session: session
  }
  return {
    props: {
      data,
    },
  }
}